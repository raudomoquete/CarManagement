// <auto-generated />
using System;
using CarMgmt.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarMgmt.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230410221824_completedDbUpdtd")]
    partial class completedDbUpdtd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarMgmt.Core.Accessory", b =>
                {
                    b.Property<int>("AccessoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessoryId"));

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccessoryId");

                    b.HasIndex("ModelId");

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("CarMgmt.Core.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CarMgmt.Core.Engine", b =>
                {
                    b.Property<int>("EngineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EngineId"));

                    b.Property<int>("Cilinders")
                        .HasColumnType("int");

                    b.Property<int>("Liters")
                        .HasColumnType("int");

                    b.HasKey("EngineId");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("CarMgmt.Core.Fuel", b =>
                {
                    b.Property<int>("FuelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuelId"));

                    b.Property<string>("EnumName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FuelId");

                    b.ToTable("Fuels");
                });

            modelBuilder.Entity("CarMgmt.Core.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessoryId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("FuelId")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TractionId")
                        .HasColumnType("int");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("int");

                    b.Property<int>("TransmissionType")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("EngineId")
                        .IsUnique();

                    b.HasIndex("FuelId")
                        .IsUnique();

                    b.HasIndex("TractionId")
                        .IsUnique();

                    b.HasIndex("TransmissionId")
                        .IsUnique();

                    b.HasIndex("YearId")
                        .IsUnique();

                    b.ToTable("Models");
                });

            modelBuilder.Entity("CarMgmt.Core.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("CarMgmt.Core.Traction", b =>
                {
                    b.Property<int>("TractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TractionId"));

                    b.Property<string>("TractionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TractionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TractionId");

                    b.ToTable("Tractions");
                });

            modelBuilder.Entity("CarMgmt.Core.Transmission", b =>
                {
                    b.Property<int>("TransmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransmissionId"));

                    b.Property<string>("AutomaticEnumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("speed")
                        .HasColumnType("int");

                    b.HasKey("TransmissionId");

                    b.ToTable("Transmissions");
                });

            modelBuilder.Entity("CarMgmt.Core.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BodyStyleEnum")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleStatusEnum")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeEnum")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .IsUnique();

                    b.HasIndex("StatusId")
                        .IsUnique();

                    b.HasIndex("VehicleTypeId")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("CarMgmt.Core.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("CarMgmt.Core.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearId"));

                    b.Property<int>("ModelYear")
                        .HasColumnType("int");

                    b.HasKey("YearId");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("CarMgmt.Core.Accessory", b =>
                {
                    b.HasOne("CarMgmt.Core.Model", "Model")
                        .WithMany("Accessories")
                        .HasForeignKey("ModelId");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarMgmt.Core.Model", b =>
                {
                    b.HasOne("CarMgmt.Core.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMgmt.Core.Engine", "Engine")
                        .WithOne("Model")
                        .HasForeignKey("CarMgmt.Core.Model", "EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMgmt.Core.Fuel", "Fuel")
                        .WithOne("Model")
                        .HasForeignKey("CarMgmt.Core.Model", "FuelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMgmt.Core.Traction", "Traction")
                        .WithOne("Model")
                        .HasForeignKey("CarMgmt.Core.Model", "TractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMgmt.Core.Transmission", "Transmission")
                        .WithOne("Model")
                        .HasForeignKey("CarMgmt.Core.Model", "TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMgmt.Core.Year", "Year")
                        .WithOne("Model")
                        .HasForeignKey("CarMgmt.Core.Model", "YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Engine");

                    b.Navigation("Fuel");

                    b.Navigation("Traction");

                    b.Navigation("Transmission");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("CarMgmt.Core.Vehicle", b =>
                {
                    b.HasOne("CarMgmt.Core.Brand", "Brand")
                        .WithOne("Vehicle")
                        .HasForeignKey("CarMgmt.Core.Vehicle", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMgmt.Core.Status", "Status")
                        .WithOne("Vehicle")
                        .HasForeignKey("CarMgmt.Core.Vehicle", "StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMgmt.Core.VehicleType", "VehicleType")
                        .WithOne("Vehicle")
                        .HasForeignKey("CarMgmt.Core.Vehicle", "VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Status");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("CarMgmt.Core.Brand", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarMgmt.Core.Engine", b =>
                {
                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarMgmt.Core.Fuel", b =>
                {
                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarMgmt.Core.Model", b =>
                {
                    b.Navigation("Accessories");
                });

            modelBuilder.Entity("CarMgmt.Core.Status", b =>
                {
                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarMgmt.Core.Traction", b =>
                {
                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarMgmt.Core.Transmission", b =>
                {
                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarMgmt.Core.VehicleType", b =>
                {
                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarMgmt.Core.Year", b =>
                {
                    b.Navigation("Model");
                });
#pragma warning restore 612, 618
        }
    }
}
